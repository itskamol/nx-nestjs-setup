// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  avatar    String?
  role      Role     @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  faceRecords FaceRecord[]

  // Indexes for performance
  @@index([email])
  @@index([role])
  @@index([isActive])
  @@map("users")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum FaceEventType {
  DETECTED
  RECOGNIZED
  UNKNOWN
  ENROLLED
  UPDATED
  DELETED
}

model FaceRecord {
  id         String   @id @default(cuid())
  userId     String?
  faceId     String   @unique // Hikvision face ID
  imageData  String // Base64 encoded image
  faceData   String // Face features/template
  confidence Float
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user   User?                  @relation(fields: [userId], references: [id])
  events FaceRecognitionEvent[]

  @@index([userId])
  @@index([faceId])
  @@index([isActive])
  @@map("face_records")
}

model FaceRecognitionEvent {
  id           String        @id @default(cuid())
  faceRecordId String?
  faceId       String?
  eventType    FaceEventType
  confidence   Float
  timestamp    DateTime      @default(now())
  cameraId     String?
  location     String?
  imageData    String? // Base64 encoded snapshot
  metadata     Json? // Additional event data

  faceRecord FaceRecord? @relation(fields: [faceRecordId], references: [id])

  @@index([faceRecordId])
  @@index([faceId])
  @@index([eventType])
  @@index([timestamp])
  @@map("face_recognition_events")
}

model Device {
  id              Int          @id @default(autoincrement())
  name            String
  username        String
  location        String?
  host            String?
  port            Int          @default(80)
  password        String
  status          DeviceStatus @default(ACTIVE)
  deviceName      String
  deviceID        String
  model           String
  serialNumber    String       @unique
  macAddress      String
  firmwareVersion String
  deviceType      String
  lastSeenAt      DateTime?
  metadata        Json?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@map("devices")
}

enum DeviceStatus {
  ACTIVE
  INACTIVE
  OFFLINE
}
